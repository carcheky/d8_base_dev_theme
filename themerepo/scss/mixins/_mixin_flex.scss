// sass-lint:disable no-vendor-prefixes no-duplicate-properties no-misspelled-properties property-sort-order
// mixin para aplicar flex por defecto donde se llame vÃ­a " @include flex(xxs, column); "
// este mixin requiere @import 'mixins/mixin_mediaqueries';
// @mixin flexcustom($mediaquery, $flow) {
//   @include media(#{$mediaquery}) {
//     display: flex;
//     flex-flow: $flow wrap;
//     >* {
//       flex: auto;
//     }
//   }
// }
// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
//
// Copyright (c) 2013 Brian Franco
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// This is a set of mixins for those who want to mess around with flexbox
// using the native support of current browsers. For full support table
// check: http://caniuse.com/flexbox
//
// Basically this will use:
//
// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
//
// This was inspired by:
//
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
//
// With help from:
//
// * http://w3.org/tr/css3-flexbox/
// * http://the-echoplex.net/flexyboxes/
// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// * http://css-tricks.com/using-flexbox/
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes
//----------------------------------------------------------------------
// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

%flexbox,
.flexbox {
  @include flexbox;
}

//----------------------------------
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

%inline-flex,
.inline-flex {
  @include inline-flex;
}

//----------------------------------------------------------------------
// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property
@mixin flex-direction($value: row) {
  @if $value==row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  }

  @else if $value==column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  }

  @else if $value==column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  }

  @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }

  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

// Shorter version:
@mixin flex-dir($args...) {
  @include flex-direction($args...);
}

%flex-column,
.flex-column {
  @include flex-dir(column);
}

%flex-row,
.flex-row {
  @include flex-dir(row);
}

//----------------------------------------------------------------------
// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property
@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;

  @if $value==nowrap {
    -ms-flex-wrap: none;
  }

  @else {
    -ms-flex-wrap: $value;
  }

  flex-wrap: $value;
}

%flex-wrap,
.flex-wrap {
  @include flex-wrap(wrap);
}

%flex-nowrap,
.flex-nowrap {
  @include flex-wrap(nowrap);
}

//----------------------------------------------------------------------
// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property
@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

//----------------------------------------------------------------------
// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

//----------------------------------------------------------------------
// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property
@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

//----------------------------------------------------------------------
// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property
@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

//----------------------------------------------------------------------
// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

//----------------------------------------------------------------------
// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property
@mixin flex($fg: 1, $fs: null, $fb: null) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg)=='list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

//----------------------------------------------------------------------
// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property
@mixin justify-content($value: flex-start) {
  @if $value==flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  }

  @else if $value==flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  }

  @else if $value==space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  }

  @else if $value==space-around {
    -ms-flex-pack: distribute;
  }

  @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }

  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

// Shorter version:
@mixin flex-just($args...) {
  @include justify-content($args...);
}

%justify-content-flex-start,
.justify-content-flex-start {
  @include flex-just(flex-start);
}

%justify-content-flex-end,
.justify-content-flex-end {
  @include flex-just(flex-end);
}

%justify-content-space-between,
.justify-content-space-between {
  @include flex-just(space-between);
}

%justify-content-space-around,
.justify-content-space-space-around {
  @include flex-just(space-around);
}

%justify-content-center,
.justify-content-center {
  @include flex-just(center);
}

//----------------------------------------------------------------------
// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property
@mixin align-items($value: stretch) {
  @if $value==flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  }

  @else if $value==flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  }

  @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }

  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

%align-items-flex-start,
.align-items-flex-start {
  @include align-items(flex-start);
}

%align-items-flex-end,
.align-items-flex-end {
  @include align-items(flex-end);
}

%align-items-center,
.align-items-center {
  @include align-items(center);
}

//----------------------------------
// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;

  @if $value==flex-start {
    -ms-flex-item-align: start;
  }

  @else if $value==flex-end {
    -ms-flex-item-align: end;
  }

  @else {
    -ms-flex-item-align: $value;
  }

  align-self: $value;
}

%align-self-flex-start,
.align-self-flex-start {
  @include align-self(flex-start);
}

%align-self-flex-end,
.align-self-flex-end {
  @include align-self(flex-end);
}

%align-self-center,
.align-self-center {
  @include align-self(center);
}

//----------------------------------------------------------------------
// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property
@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;

  @if $value==flex-start {
    -ms-flex-line-pack: start;
  }

  @else if $value==flex-end {
    -ms-flex-line-pack: end;
  }

  @else {
    -ms-flex-line-pack: $value;
  }

  align-content: $value;
}

%align-content-flex-start,
.align-content-flex-start {
  @include align-content(flex-start);
}

%align-content-flex-end,
.align-content-flex-end {
  @include align-content(flex-end);
}

%align-content-center,
.align-content-center {
  @include align-content(center);
}

// some utils
.mauto {
  margin: auto !important;
}

// flextend
%flextend,
.flextend {
  @include flexbox;
  @include flex-wrap(wrap);
  @include justify-content(space-between);

  >* {
    @include flex(1, 1, 98%);
    margin: 1%;
  }
}

// mediaquery columns flex
@include media(xxs) {
  .flextend {

    .xxs1,
    .col-xxs-1 {
      width: calc((8%) - 2%);
      flex: 0 1 calc((8%) - 2%);
    }

    .xxs2,
    .col-xxs-2 {
      width: calc((16%) - 2%);
      flex: 0 1 calc((16%) - 2%);
    }

    .xxs3,
    .col-xxs-3 {
      width: calc((25%) - 2%);
      flex: 0 1 calc((25%) - 2%);
    }

    .xxs4,
    .col-xxs-4 {
      width: calc((33%) - 2%);
      flex: 0 1 calc((33%) - 2%);
    }

    .xxs5,
    .col-xxs-5 {
      width: calc((41%) - 2%);
      flex: 0 1 calc((41%) - 2%);
    }

    .xxs6,
    .col-xxs-6 {
      width: calc((50%) - 2%);
      flex: 0 1 calc((50%) - 2%);
    }

    .xxs7,
    .col-xxs-7 {
      width: calc((58%) - 2%);
      flex: 0 1 calc((58%) - 2%);
    }

    .xxs8,
    .col-xxs-8 {
      width: calc((66%) - 2%);
      flex: 0 1 calc((66%) - 2%);
    }

    .xxs9,
    .col-xxs-9 {
      width: calc((75%) - 2%);
      flex: 0 1 calc((75%) - 2%);
    }

    .xxs10,
    .col-xxs-10 {
      width: calc((83%) - 2%);
      flex: 0 1 calc((83%) - 2%);
    }

    .xxs11,
    .col-xxs-11 {
      width: calc((91%) - 2%);
      flex: 0 1 calc((91%) - 2%);
    }

    .xxs12,
    .col-xxs-12 {
      width: calc((100%) - 2%);
      flex: 0 1 calc((100%) - 2%);
    }
  }
}

@include media(xs) {
  .flextend {

    .xs1,
    .col-xs-1 {
      width: calc((8%) - 2%);
      flex: 0 1 calc((8%) - 2%);
    }

    .xs2,
    .col-xs-2 {
      width: calc((16%) - 2%);
      flex: 0 1 calc((16%) - 2%);
    }

    .xs3,
    .col-xs-3 {
      width: calc((25%) - 2%);
      flex: 0 1 calc((25%) - 2%);
    }

    .xs4,
    .col-xs-4 {
      width: calc((33%) - 2%);
      flex: 0 1 calc((33%) - 2%);
    }

    .xs5,
    .col-xs-5 {
      width: calc((41%) - 2%);
      flex: 0 1 calc((41%) - 2%);
    }

    .xs6,
    .col-xs-6 {
      width: calc((50%) - 2%);
      flex: 0 1 calc((50%) - 2%);
    }

    .xs7,
    .col-xs-7 {
      width: calc((58%) - 2%);
      flex: 0 1 calc((58%) - 2%);
    }

    .xs8,
    .col-xs-8 {
      width: calc((66%) - 2%);
      flex: 0 1 calc((66%) - 2%);
    }

    .xs9,
    .col-xs-9 {
      width: calc((75%) - 2%);
      flex: 0 1 calc((75%) - 2%);
    }

    .xs10,
    .col-xs-10 {
      width: calc((83%) - 2%);
      flex: 0 1 calc((83%) - 2%);
    }

    .xs11,
    .col-xs-11 {
      width: calc((91%) - 2%);
      flex: 0 1 calc((91%) - 2%);
    }

    .xs12,
    .col-xs-12 {
      width: calc((100%) - 2%);
      flex: 0 1 calc((100%) - 2%);
    }
  }
}

@include media(sm) {
  .flextend {

    .sm1,
    .col-sm-1 {
      width: calc((8%) - 2%);
      flex: 0 1 calc((8%) - 2%);
    }

    .sm2,
    .col-sm-2 {
      width: calc((16%) - 2%);
      flex: 0 1 calc((16%) - 2%);
    }

    .sm3,
    .col-sm-3 {
      width: calc((25%) - 2%);
      flex: 0 1 calc((25%) - 2%);
    }

    .sm4,
    .col-sm-4 {
      width: calc((33%) - 2%);
      flex: 0 1 calc((33%) - 2%);
    }

    .sm5,
    .col-sm-5 {
      width: calc((41%) - 2%);
      flex: 0 1 calc((41%) - 2%);
    }

    .sm6,
    .col-sm-6 {
      width: calc((50%) - 2%);
      flex: 0 1 calc((50%) - 2%);
    }

    .sm7,
    .col-sm-7 {
      width: calc((58%) - 2%);
      flex: 0 1 calc((58%) - 2%);
    }

    .sm8,
    .col-sm-8 {
      width: calc((66%) - 2%);
      flex: 0 1 calc((66%) - 2%);
    }

    .sm9,
    .col-sm-9 {
      width: calc((75%) - 2%);
      flex: 0 1 calc((75%) - 2%);
    }

    .sm10,
    .col-sm-10 {
      width: calc((83%) - 2%);
      flex: 0 1 calc((83%) - 2%);
    }

    .sm11,
    .col-sm-11 {
      width: calc((91%) - 2%);
      flex: 0 1 calc((91%) - 2%);
    }

    .sm12,
    .col-sm-12 {
      width: calc((100%) - 2%);
      flex: 0 1 calc((100%) - 2%);
    }
  }
}

@include media(md) {
  .flextend {

    .md1,
    .col-md-1 {
      width: calc((8%) - 2%);
      flex: 0 1 calc((8%) - 2%);
    }

    .md2,
    .col-md-2 {
      width: calc((16%) - 2%);
      flex: 0 1 calc((16%) - 2%);
    }

    .md3,
    .col-md-3 {
      width: calc((25%) - 2%);
      flex: 0 1 calc((25%) - 2%);
    }

    .md4,
    .col-md-4 {
      width: calc((33%) - 2%);
      flex: 0 1 calc((33%) - 2%);
    }

    .md5,
    .col-md-5 {
      width: calc((41%) - 2%);
      flex: 0 1 calc((41%) - 2%);
    }

    .md6,
    .col-md-6 {
      width: calc((50%) - 2%);
      flex: 0 1 calc((50%) - 2%);
    }

    .md7,
    .col-md-7 {
      width: calc((58%) - 2%);
      flex: 0 1 calc((58%) - 2%);
    }

    .md8,
    .col-md-8 {
      width: calc((66%) - 2%);
      flex: 0 1 calc((66%) - 2%);
    }

    .md9,
    .col-md-9 {
      width: calc((75%) - 2%);
      flex: 0 1 calc((75%) - 2%);
    }

    .md10,
    .col-md-10 {
      width: calc((83%) - 2%);
      flex: 0 1 calc((83%) - 2%);
    }

    .md11,
    .col-md-11 {
      width: calc((91%) - 2%);
      flex: 0 1 calc((91%) - 2%);
    }

    .md12,
    .col-md-12 {
      width: calc((100%) - 2%);
      flex: 0 1 calc((100%) - 2%);
    }
  }
}

@include media(lg) {
  .flextend {

    .lg1,
    .col-lg-1 {
      width: calc((8%) - 2%);
      flex: 0 1 calc((8%) - 2%);
    }

    .lg2,
    .col-lg-2 {
      width: calc((16%) - 2%);
      flex: 0 1 calc((16%) - 2%);
    }

    .lg3,
    .col-lg-3 {
      width: calc((25%) - 2%);
      flex: 0 1 calc((25%) - 2%);
    }

    .lg4,
    .col-lg-4 {
      width: calc((33%) - 2%);
      flex: 0 1 calc((33%) - 2%);
    }

    .lg5,
    .col-lg-5 {
      width: calc((41%) - 2%);
      flex: 0 1 calc((41%) - 2%);
    }

    .lg6,
    .col-lg-6 {
      width: calc((50%) - 2%);
      flex: 0 1 calc((50%) - 2%);
    }

    .lg7,
    .col-lg-7 {
      width: calc((58%) - 2%);
      flex: 0 1 calc((58%) - 2%);
    }

    .lg8,
    .col-lg-8 {
      width: calc((66%) - 2%);
      flex: 0 1 calc((66%) - 2%);
    }

    .lg9,
    .col-lg-9 {
      width: calc((75%) - 2%);
      flex: 0 1 calc((75%) - 2%);
    }

    .lg10,
    .col-lg-10 {
      width: calc((83%) - 2%);
      flex: 0 1 calc((83%) - 2%);
    }

    .lg11,
    .col-lg-11 {
      width: calc((91%) - 2%);
      flex: 0 1 calc((91%) - 2%);
    }

    .lg12,
    .col-lg-12 {
      width: calc((100%) - 2%);
      flex: 0 1 calc((100%) - 2%);
    }
  }
}

@include media(xl) {
  .flextend {

    .xl1,
    .col-xl-1 {
      width: calc((8%) - 2%);
      flex: 0 1 calc((8%) - 2%);
    }

    .xl2,
    .col-xl-2 {
      width: calc((16%) - 2%);
      flex: 0 1 calc((16%) - 2%);
    }

    .xl3,
    .col-xl-3 {
      width: calc((25%) - 2%);
      flex: 0 1 calc((25%) - 2%);
    }

    .xl4,
    .col-xl-4 {
      width: calc((33%) - 2%);
      flex: 0 1 calc((33%) - 2%);
    }

    .xl5,
    .col-xl-5 {
      width: calc((41%) - 2%);
      flex: 0 1 calc((41%) - 2%);
    }

    .xl6,
    .col-xl-6 {
      width: calc((50%) - 2%);
      flex: 0 1 calc((50%) - 2%);
    }

    .xl7,
    .col-xl-7 {
      width: calc((58%) - 2%);
      flex: 0 1 calc((58%) - 2%);
    }

    .xl8,
    .col-xl-8 {
      width: calc((66%) - 2%);
      flex: 0 1 calc((66%) - 2%);
    }

    .xl9,
    .col-xl-9 {
      width: calc((75%) - 2%);
      flex: 0 1 calc((75%) - 2%);
    }

    .xl10,
    .col-xl-10 {
      width: calc((83%) - 2%);
      flex: 0 1 calc((83%) - 2%);
    }

    .xl11,
    .col-xl-11 {
      width: calc((91%) - 2%);
      flex: 0 1 calc((91%) - 2%);
    }

    .xl12,
    .col-xl-12 {
      width: calc((100%) - 2%);
      flex: 0 1 calc((100%) - 2%);
    }
  }
}

@include media(xxl) {
  .flextend {

    .xxl1,
    .col-xxl-1 {
      width: calc((8%) - 2%);
      flex: 0 1 calc((8%) - 2%);
    }

    .xxl2,
    .col-xxl-2 {
      width: calc((16%) - 2%);
      flex: 0 1 calc((16%) - 2%);
    }

    .xxl3,
    .col-xxl-3 {
      width: calc((25%) - 2%);
      flex: 0 1 calc((25%) - 2%);
    }

    .xxl4,
    .col-xxl-4 {
      width: calc((33%) - 2%);
      flex: 0 1 calc((33%) - 2%);
    }

    .xxl5,
    .col-xxl-5 {
      width: calc((41%) - 2%);
      flex: 0 1 calc((41%) - 2%);
    }

    .xxl6,
    .col-xxl-6 {
      width: calc((50%) - 2%);
      flex: 0 1 calc((50%) - 2%);
    }

    .xxl7,
    .col-xxl-7 {
      width: calc((58%) - 2%);
      flex: 0 1 calc((58%) - 2%);
    }

    .xxl8,
    .col-xxl-8 {
      width: calc((66%) - 2%);
      flex: 0 1 calc((66%) - 2%);
    }

    .xxl9,
    .col-xxl-9 {
      width: calc((75%) - 2%);
      flex: 0 1 calc((75%) - 2%);
    }

    .xxl10,
    .col-xxl-10 {
      width: calc((83%) - 2%);
      flex: 0 1 calc((83%) - 2%);
    }

    .xxl11,
    .col-xxl-11 {
      width: calc((91%) - 2%);
      flex: 0 1 calc((91%) - 2%);
    }

    .xxl12,
    .col-xxl-12 {
      width: calc((100%) - 2%);
      flex: 0 1 calc((100%) - 2%);
    }
  }
}
