<?php

use Drupal\Component\Utility\UrlHelper;
use Symfony\Component\HttpFoundation\RedirectResponse;


/**
 * Implements hook_preprocess().
 */
function druparcheky_theme_preprocess(&$variables, $hook, $info)
{
  // THEME SETTINGS
  $variables['theme_full_width'] = theme_get_setting('theme_full_width');
  $variables['theme_dev_class'] = theme_get_setting('theme_dev_class');


  // use {{ nid }} var in Twig
  if ($node = \Drupal::request()->attributes->get('node')) {
    if (NULL != $node) {
      if (!is_string($node)) {
        $variables['nid'] = $node->id();
      }
      else {
        $variables['nid'] = $node;
      }
    }
  }

  // use {{ language }} var in Twig
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;


  // add BLOCK CLASS
  if (isset($variables['elements'])) {
    if (isset($variables['elements']['#theme'])) {
      $variables['attributes']['class'][] = $variables['elements']['#theme'];
    }
    if (isset($variables['elements']['#base_plugin_id'])) {
      // add class base_plugin_id
      $variables['attributes']['class'][] = $variables['elements']['#base_plugin_id'];
    }
    if (isset($variables['elements']['#derivative_plugin_id'])) {
      // add class derivative_plugin_id
      $variables['attributes']['class'][] = $variables['elements']['#derivative_plugin_id'];
    }
    if (isset($variables['elements']['#id'])) {
      // add class id
      $variables['attributes']['class'][] = $variables['elements']['#id'];
    }
    if (isset($variables['elements']['content'])) {
      if (isset($variables['elements']['content']['#block_content'])) {
        $variables['attributes']['class'][] = 'block-custom';
        if ($variables['elements']['content']['#block_content']->bundle()) {
          // add class bundle
          $variables['attributes']['class'][] = 'block-bundle-' . $variables['elements']['content']['#block_content']->bundle();
        }
        if ($variables['elements']['content']['#block_content']->id()) {
          // add class id
          $variables['attributes']['class'][] = 'block-id-' . $variables['elements']['content']['#block_content']->id();
        }
        if ($variables['elements']['content']['#block_content']->label()) {
          // add class label
          $variables['attributes']['class'][] = 'block-label-' . $variables['elements']['content']['#block_content']->label();
        }
      }
    }
  }


}


/**
 * Implements hook_preprocess_HOOK() for custom layouts templates.
 *
 */
function druparcheky_theme_preprocess_layout(&$variables)
{
  $variables['attributes']['class'][] = 'layout-custom';
  if (isset($variables['content'])) {
    foreach ($variables['content'] as $key => $value) {
      // exclusive class
      if (isset($variables['content'][$key])) {
        foreach ($variables['content'][$key] as $key2 => $value2) {
          $variables['attributes']['class'][] = 'layout-' . $key2;
          $variables['uniqueid'] = $key2;
          break;
        }
      }
      break;
    }
  }
} /* END druparcheky_theme_preprocess_layout */


/**
 * Implements hook_preprocess_html().
 */
function druparcheky_theme_preprocess_html(&$variables)
{
  $mobile_menu_class = theme_get_setting('mobile_menu_class');
  $variables['#attached']['drupalSettings']['druparcheky_theme']['mobile_menu']['mobile_menu_class'] = $mobile_menu_class;

  $mobile_menu_class_place = theme_get_setting('mobile_menu_class_place');
  $variables['#attached']['drupalSettings']['druparcheky_theme']['mobile_menu']['mobile_menu_class_place'] = $mobile_menu_class_place;
}


/**
 * Implements hook_form_system_theme_settings_alter().
 */
function druparcheky_theme_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id = NULL)
{
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $mobile_menu_class = theme_get_setting('mobile_menu_class');
  $form['mobile_menu_class'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Drupal Block Menu'),
    '#default_value' => theme_get_setting('mobile_menu_class'),
    '#description'   => t("Set id/class to get menu for mobile."),
  );

  $mobile_menu_class_place = theme_get_setting('mobile_menu_class_place');
  $form['mobile_menu_class_place'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Class to place mobile menu'),
    '#default_value' => theme_get_setting('mobile_menu_class_place'),
    '#description'   => t("Set class for mobile-menu place. (can't be #mobile-menu)"),
  );

  $theme_full_width = theme_get_setting('theme_full_width');
  $form['theme_full_width'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('full-width layer'),
    '#default_value' => $theme_full_width,
    '#description'   => t("if enabled, full-width layer appear in 1|2|3|4 column layers.<br>Can set max-width value in \"scss/_variables.scss\" \$max_width_container var"),
  );

  $theme_dev_class = theme_get_setting('theme_dev_class');
  $form['theme_dev_class'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Dev Resolution Block'),
    '#default_value' => $theme_dev_class,
    '#description'   => t("if enabled, helper block will show"),
  );
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for block types templates.
 * @param array $suggestions
 * @param array $variables
 */
function druparcheky_theme_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    if ($variables['elements']['content']['#block_content']->bundle()) {
      array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
    }
  }
}
