<?php

/**
 *  * Implements hook_preprocess().
 *  */
function druparcheky_theme_preprocess(&$variables, $hook, $info)
{
  // * GET THEME SETTINGS
  $variables['media_query_helper'] = theme_get_setting('media_query_helper');
  // * TWIG VARS
  // {{ nid }}
  if ($node = \Drupal::request()->attributes->get('node')) {
    // create {{ nid }} var for Twig
    if (NULL != $node) {
      if (!is_string($node)) {
        $variables['nid'] = $node->id();
      } else {
        $variables['nid'] = $node;
      }
    }
  }
  // {{ language }}
  if ($language = \Drupal::languageManager()->getCurrentLanguage()->getId()) {
    // create {{ language }} var for Twig
    $variables['language'] = $language;
  }
  // * BLOCK CLASSES
  if (isset($variables['elements'])) {
    // Añade la clase "nombre_de_sistema" a los bloques
    // no funciona con los bloques dentro de layout builder
    if (isset($variables['elements']['#id'])) {
      $variables['attributes']['class'][] = $variables['elements']['#id'];
    }
    if (isset($variables['elements']['content'])) {
      if (isset($variables['elements']['content']['#block_content'])) {
        if ($variables['elements']['content']['#block_content']->bundle()) {
          // Añade la clase 'block-custom' para los bloques personalizados.
          // realmente es igual que la clase 'block-block-content', pero mas intuitiva.
          // los bloques de sistema no se verán afectados.
          $variables['attributes']['class'][] = 'block-custom';
          // Añade la clase 'block-custom-{{tipo_de_bloque}}' para los bloques personalizados.
          // los bloques de sistema no se verán afectados.
          $variables['attributes']['class'][] = 'block-custom-' . $variables['elements']['content']['#block_content']->bundle();
        }
        if ($variables['elements']['content']['#block_content']->id()) {
          // Añade la clase 'block-id-{{id}}' a bloques personalizados
          $variables['attributes']['class'][] = 'block-id-' . $variables['elements']['content']['#block_content']->id();
        }
      }
    }
  }
}


/**
 * Implements hook_form_system_theme_settings_alter().
 *
 */
function druparcheky_theme_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id = NULL)
{
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }
  $media_query_helper = theme_get_setting('media_query_helper');
  $form['media_query_helper'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('media_query_helper classes'),
    '#default_value' => $media_query_helper,
    '#description'   => t("if enabled, media_query_helper block will show"),
  );
}


// /**
//  * Implements hook_preprocess_HOOK() for custom layouts templates.
//  *
//  */
// function druparcheky_theme_preprocess_layout(&$variables)
// {
//   $variables['attributes']['class'][] = 'layout-custom';
//   if (isset($variables['content'])) {
//     foreach ($variables['content'] as $key => $value) {
//       // exclusive class
//       if (isset($variables['content'][$key])) {
//         foreach ($variables['content'][$key] as $key2 => $value2) {
//           $variables['attributes']['class'][] = 'layout-' . $key2;
//           $variables['uniqueid'] = $key2;
//           break;
//         }
//       }
//       break;
//     }
//   }
// } /* END druparcheky_theme_preprocess_layout */


/**
 * Implements hook_theme_suggestions_HOOK_alter() for block types templates.
 * @param array $suggestions
 * @param array $variables
 */
function druparcheky_theme_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    if ($variables['elements']['content']['#block_content']->bundle()) {
      array_splice($suggestions, 1, 0, 'block__block_content__' . $variables['elements']['content']['#block_content']->bundle());
    }
  }
}
//
